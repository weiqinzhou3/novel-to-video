# 小说自动视频制作工具 - Docker Compose配置
# 提供完整的容器化解决方案

version: '3.8'

services:
  # 主应用服务
  novel-to-video:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: novel-to-video-app
    restart: unless-stopped
    logging: *default-logging
    
    # 环境变量
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - TZ=Asia/Shanghai
    
    # 端口映射
    ports:
      - "8000:8000"
    
    # 卷挂载
    volumes:
      # 数据目录
      - ./data:/app/data
      - ./output:/app/output
      - ./logs:/app/logs
      - ./config:/app/config
      # 缓存目录
      - novel_cache:/app/cache
      # 临时目录
      - novel_temp:/app/data/temp
    
    # 网络
    networks:
      - novel-network
    
    # 健康检查
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    
    # 依赖服务
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: novel-redis
    restart: unless-stopped
    logging: *default-logging
    
    # 端口映射
    ports:
      - "6379:6379"
    
    # 卷挂载
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    
    # 启动命令
    command: redis-server /usr/local/etc/redis/redis.conf
    
    # 网络
    networks:
      - novel-network
    
    # 健康检查
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # PostgreSQL数据库服务
  postgres:
    image: postgres:15-alpine
    container_name: novel-postgres
    restart: unless-stopped
    logging: *default-logging
    
    # 环境变量
    environment:
      - POSTGRES_DB=novel_to_video
      - POSTGRES_USER=novel_user
      - POSTGRES_PASSWORD=novel_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    
    # 端口映射
    ports:
      - "5432:5432"
    
    # 卷挂载
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    
    # 网络
    networks:
      - novel-network
    
    # 健康检查
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U novel_user -d novel_to_video"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M

  # Nginx反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: novel-nginx
    restart: unless-stopped
    logging: *default-logging
    
    # 端口映射
    ports:
      - "80:80"
      - "443:443"
    
    # 卷挂载
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - ./output:/var/www/output:ro
    
    # 网络
    networks:
      - novel-network
    
    # 依赖服务
    depends_on:
      - novel-to-video
    
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # 监控服务（可选）
  prometheus:
    image: prom/prometheus:latest
    container_name: novel-prometheus
    restart: unless-stopped
    logging: *default-logging
    
    # 端口映射
    ports:
      - "9090:9090"
    
    # 卷挂载
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    
    # 启动命令
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    # 网络
    networks:
      - novel-network
    
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Grafana仪表板（可选）
  grafana:
    image: grafana/grafana:latest
    container_name: novel-grafana
    restart: unless-stopped
    logging: *default-logging
    
    # 环境变量
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    
    # 端口映射
    ports:
      - "3000:3000"
    
    # 卷挂载
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning:ro
    
    # 网络
    networks:
      - novel-network
    
    # 依赖服务
    depends_on:
      - prometheus
    
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

# 网络配置
networks:
  novel-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 卷配置
volumes:
  # 应用数据
  novel_cache:
    driver: local
  novel_temp:
    driver: local
  
  # 数据库数据
  postgres_data:
    driver: local
  redis_data:
    driver: local
  
  # 监控数据
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# 扩展配置
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"